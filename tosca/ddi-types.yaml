tosca_definitions_version: yorc_tosca_simple_yaml_1_0

metadata:
  template_name: org.lexis.common.ddi-types
  template_version: 0.1.4
  template_author: yorc

description: DDI types - Distributed Data Infrastructure

imports:
  - org.lexis.common.heappe-types:1.0.6
  - <yorc-types.yml>

artifact_types:
  org.lexis.common.ddi.artifacts.Deployment:
    derived_from: tosca.artifacts.Deployment
data_types:
  org.lexis.common.ddi.types.Metadata:
    derived_from: tosca.datatypes.Root
    properties:
      creator:
        description: Dataset creators
        type: list
        entry_schema:
          type: string
        required: false
      contributor:
        description: Dataset contributors
        type: list
        entry_schema:
          type: string
        required: false
      publisher:
        description: Dataset publishers
        type: list
        entry_schema:
          type: string
        required: false
      owner:
        description: Dataset owners
        type: list
        entry_schema:
          type: string
        required: false
      identifier:
        description: Dataset identifier
        type: string
        required: false
      publicationYear:
        description: Dataset year of publication
        type: string
        required: false
      resourceType:
        description: Dataset resource type
        type: string
        required: false
      title:
        description: Dataset title
        type: string
        required: false
      relatedIdentifier:
        description: Dataset related identifier
        type: list
        entry_schema:
          type: string
        required: false
  org.lexis.common.ddi.types.StoredFileInfo:
    derived_from: tosca.datatypes.Root
    properties:
      LastModifiedDate:
        type: string
        description: >
          Last modified date of a stored file
      RequestID:
        type: string
        description: DDI request ID used to store the file
  org.lexis.common.ddi.types.ToBeStoredFileInfo:
    derived_from: tosca.datatypes.Root
    properties:
      LastModifiedDate:
        type: string
        description: >
          Last modified date of the file
      CandidateToStorageDate:
        type: string
        description: Date to which the file was first considered to a candidate to storage
node_types:
  org.lexis.common.ddi.nodes.pub.Cloud:
    derived_from: tosca.nodes.Root
    abstract: true
    description: >
      Parent type of DDI cloud-related node types (abstract)
    capabilities:
      cloud_staging_area_access:
        type: org.lexis.common.ddi.capabilities.CloudStagingAreaAccess
    requirements:
      - os:
          capability: tosca.capabilities.OperatingSystem
          node: tosca.nodes.Compute
          relationship: org.lexis.common.ddi.relationships.SameSite
          occurrences: [0, 1]
  org.lexis.common.ddi.nodes.EnableCloudStagingAreaAccessJob:
    derived_from: org.lexis.common.ddi.nodes.pub.Cloud
    description: >
      Enable the access to the Cloud Staging Area for a Compute Instance for NFS mounts
    properties:
      token:
        description: OpenID Connect token
        type: string
        required: true
    # Atributes added here in addition to capability attributes, so that they
    # can be referenced with the REQ_TARGET keyword
    attributes:
      staging_area_name:
        type: string
        description: Name of the cloud staging area
      remote_file_system:
        type: string
        description: remote file system to mount to access the staging area
      mount_type:
        type: string
        description: Type of file system
      mount_options:
        type: string
        description: mount options to use
      user_id:
        type: string
        description: ID of the user with read/write access to this file system
      group_id:
        type: string
        description: ID of the unix group with read/write access to this file system
      request_id:
        type: string
        description: >
          ID of the DDI request created
    requirements:
      - os:
          capability: tosca.capabilities.OperatingSystem
          node: tosca.nodes.Compute
          relationship: org.lexis.common.ddi.relationships.SameSite
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        delete:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          TOKEN: { get_property: [SELF, token] }
        submit:
          inputs:
            IP_ADDRESS: { get_attribute: [REQ_TARGET, os, public_address] }
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        run:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
  org.lexis.common.ddi.nodes.DisableCloudStagingAreaAccessJob:
    derived_from: org.lexis.common.ddi.nodes.pub.Cloud
    description: >
      Disable the access to the Cloud Staging Area for a Compute Instance for NFS mounts
    properties:
      token:
        description: OpenID Connect token
        type: string
        required: true
    attributes:
      request_id:
        type: string
        description: >
          ID of the DDI request created
    requirements:
      - os:
          capability: tosca.capabilities.OperatingSystem
          node: tosca.nodes.Compute
          relationship: org.lexis.common.ddi.relationships.SameSite
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        delete:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          TOKEN: { get_property: [SELF, token] }
        submit:
          inputs:
            IP_ADDRESS: { get_attribute: [REQ_TARGET, os, public_address] }
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        run:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
  org.lexis.common.ddi.nodes.DDIToCloudJob:
    derived_from: org.lexis.common.ddi.nodes.pub.Cloud
    description: >
      Transfer dataset from DDI to Cloud staging area
    properties:
      token:
        description: OpenID Connect token
        type: string
        required: true
      ddi_dataset_path:
        description: Path of the DDI dataset to transfer to the Cloud staging area
        type: string
        required: true
      decrypt:
        description: Should the dataset be decrypted after transfer
        type: boolean
        default: false
        required: false
      uncompress:
        description: Should the dataset be uncompressed after transfer
        type: boolean
        default: false
        required: false
      cloud_staging_area_directory_path:
        type: string
        description: >
          Relative directory path in cloud staging area where to copy the dataset.
        required: false
        default: ""
      timestamp_cloud_staging_area_directory:
        type: boolean
        description: Add a tiemstamp to cloud_staging_area_directory_path
        default: false
        required: false
    attributes:
      request_id:
        type: string
        description: >
          ID of the DDI request created
      destination_path:
        type: string
        description: Path to the data transferred in Cloud staging area
      staging_area_name:
        type: string
        description: Name of the cloud staging area
      staging_area_directory_path:
        type: string
        description: Path of the dataset directory in Cloud staging area
    capabilities:
      data_transfer:
        type: org.lexis.common.ddi.capabilities.DataTransferCloud
    requirements:
      - os:
          capability: tosca.capabilities.OperatingSystem
          node: tosca.nodes.Compute
          relationship: org.lexis.common.ddi.relationships.SameSite
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        delete:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          TOKEN: { get_property: [SELF, token] }
        submit:
          inputs:
            DDI_DATASET_PATH: { get_property: [SELF, ddi_dataset_path] }
            DECRYPT: { get_property: [SELF, decrypt] }
            UNCOMPRESS: { get_property: [SELF, uncompress] }
            CLOUD_STAGING_AREA_DIRECTORY_PATH: { get_property: [SELF, cloud_staging_area_directory_path] }
            TIMESTAMP_CLOUD_STAGING_AREA_DIRECTORY: { get_property: [SELF, timestamp_cloud_staging_area_directory] }
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        run:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
  org.lexis.common.ddi.nodes.CloudToDDIJob:
    derived_from: org.lexis.common.ddi.nodes.pub.Cloud
    description: >
      Transfer data from Cloud staging area to DDI
    properties:
      token:
        description: OpenID Connect token
        type: string
        required: true
      encrypt:
        description: Should the dataset be encrypted
        type: boolean
        default: false
        required: false
      compress:
        description: Should the dataset be compressed
        type: boolean
        default: false
        required: false
      metadata:
        description: Dataset metadata
        type: org.lexis.common.ddi.types.Metadata
        required: false
      source_subdirectory:
        description: Subdirectoy to copy (appended to the path provided by the cloud area provider path provided in requirements)
        type: string
        required: false
      source_file_name:
        description: "Name of the file to copy (if not set, directory contents will be copied)"
        type: string
        required: false
      ddi_path:
        description: Path where to transfer the dataset in DDI
        type: string
        required: true
    attributes:
      request_id:
        type: string
        description: >
          ID of the DDI request created
      destination_path:
        type: string
        description: Path to the dataset transferred in DDI
    capabilities:
      data_transfer:
        type: org.lexis.common.ddi.capabilities.DataTransferDDI
    requirements:
      - cloud_area_directory_provider:
          capability: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
          relationship: org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        delete:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          TOKEN: { get_property: [SELF, token] }
        submit:
          inputs:
            SOURCE_SUBDIRECTORY:  { get_property: [SELF, source_subdirectory] }
            SOURCE_FILE_NAME:  { get_property: [SELF, source_file_name] }
            DDI_PATH: { get_property: [SELF, ddi_path] }
            ENCRYPT: { get_property: [SELF, encrypt] }
            COMPRESS: { get_property: [SELF, compress] }
            CLOUD_STAGING_AREA_DIRECTORY_PATH: { get_attribute: [REQ_TARGET, cloud_area_directory_provider, staging_area_directory_path] }
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        run:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
  org.lexis.common.ddi.nodes.DeleteCloudDataJob:
    derived_from: tosca.nodes.Root
    description: >
      Delete a dataset from Cloud staging area
    properties:
      token:
        description: OpenID Connect token
        type: string
        required: true
    attributes:
      request_id:
        type: string
        description: >
          ID of the DDI request created
    capabilities:
      cloud_delete:
        type: org.lexis.common.ddi.capabilities.DeleteCloudData
    requirements:
      - cloud_area_dataset_provider:
          capability: org.lexis.common.ddi.capabilities.DataTransferCloud
          relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        delete:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          TOKEN: { get_property: [SELF, token] }
        submit:
          inputs:
            CLOUD_STAGING_AREA_DIRECTORY_PATH: { get_attribute: [REQ_TARGET, cloud_area_dataset_provider, staging_area_directory_path] }
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        run:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
  org.lexis.common.ddi.nodes.DDIToHPCTaskJob:
    derived_from: tosca.nodes.Root
    description: >
      Transfer dataset from DDI to HPC staging area for a given task in the job
    properties:
      token:
        description: OpenID Connect token
        type: string
        required: true
      ddi_dataset_path:
        description: Path of the DDI dataset to transfer to HPC
        type: string
        required: true
      task_name:
        description: Name of the task in the Job
        type: string
        required: true
      decrypt:
        description: Should the dataset be decrypted after transfer
        type: boolean
        default: false
        required: false
      uncompress:
        description: Should the dataset be uncompressed after transfer
        type: boolean
        default: false
        required: false
      metadata:
        description: Dataset metadata
        type: org.lexis.common.ddi.types.Metadata
        required: false
    attributes:
      request_id:
        type: string
        description: >
          ID of the DDI request created
      destination_path:
        type: string
        description: Path to the data transferred in HPC infrastructure
    capabilities:
      data_transfer:
        type: org.lexis.common.ddi.capabilities.DataTransferHPC
    requirements:
      - job:
          capability: org.lexis.common.heappe.capabilities.HeappeJob
          node: org.lexis.common.heappe.nodes.Job
          relationship: org.lexis.common.heappe.relationships.SendInputsToJob
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        delete:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          TOKEN: { get_property: [SELF, token] }
        submit:
          inputs:
            DECRYPT: { get_property: [SELF, decrypt] }
            UNCOMPRESS: { get_property: [SELF, uncompress] }
            DDI_DATASET_PATH: { get_property: [SELF, ddi_dataset_path] }
            HPC_DIRECTORY_PATH: {get_attribute: [REQ_TARGET, job, file_transfer, path]}
            HPC_SERVER: {get_attribute: [REQ_TARGET, job, file_transfer, server]}
            HEAPPE_JOB_ID: {get_attribute: [REQ_TARGET, job, job_id]}
            HEAPPE_URL: {get_attribute: [REQ_TARGET, job, heappe_url]}
            TASKS_NAME_ID: {get_attribute: [REQ_TARGET, job, tasks_name_id]}
            TASK_NAME: {get_property: [SELF, task_name]}
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        run:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
  org.lexis.common.ddi.nodes.HPCToDDIJob:
    derived_from: tosca.nodes.Root
    description: >
      Transfer data from an HPC job to DDI
    properties:
      token:
        description: OpenID Connect token
        type: string
        required: true
      metadata:
        description: Metadata of the dataset to create
        type: org.lexis.common.ddi.types.Metadata
        required: true
      ddi_path:
        description: Path where to transfer the dataset in DDI
        type: string
        required: true
      task_name:
        description: Name of the task for which to store results. If not set, all tasks results are saved.
        type: string
        required: false
      encrypt:
        description: Should the dataset be encrypted
        type: boolean
        default: false
        required: false
      compress:
        description: Should the dataset be compressed
        type: boolean
        default: false
        required: false
    attributes:
      request_id:
        type: string
        description: >
          ID of the DDI request created
      destination_path:
        type: string
        description: Path to the dataset transferred in DDI
      stored_file_paths:
        type: list
        entry_schema:
          type: string
        description: |
          List of result files stored in DDI
    capabilities:
      data_transfer:
        type: org.lexis.common.ddi.capabilities.DataTransferDDI
    requirements:
      - job:
          capability: org.lexis.common.heappe.capabilities.HeappeJob
          node: org.lexis.common.heappe.nodes.Job
          relationship: org.lexis.common.ddi.relationships.SendJobOutputsToDDI
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        delete:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          TOKEN: { get_property: [SELF, token] }
        submit:
          inputs:
            HPC_DIRECTORY_PATH: {get_attribute: [REQ_TARGET, job, file_transfer, path]}
            HPC_SERVER: {get_attribute: [REQ_TARGET, job, file_transfer, server]}
            HEAPPE_JOB_ID: {get_attribute: [REQ_TARGET, job, job_id]}
            HEAPPE_URL: {get_attribute: [REQ_TARGET, job, heappe_url]}
            TASKS_NAME_ID: {get_attribute: [REQ_TARGET, job, tasks_name_id]}
            TASK_NAME: {get_property: [SELF, task_name]}
            DDI_PATH: { get_property: [SELF, ddi_path] }
            ENCRYPT: { get_property: [SELF, encrypt] }
            COMPRESS: { get_property: [SELF, compress] }
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        run:
          inputs:
            JOB_CHANGED_FILES: {get_attribute: [REQ_TARGET, job, changed_files]}
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
  org.lexis.common.ddi.nodes.StoreRunningHPCJobFilesToDDIJob:
    derived_from: tosca.nodes.Root
    description: >
      Transfer files from an HPC running job to DDI until this HPC job ends
    properties:
      token:
        description: OpenID Connect token
        type: string
        required: true
      metadata:
        description: Metadata of the dataset to create
        type: org.lexis.common.ddi.types.Metadata
        required: true
      project:
        description: Name of the project where to store the result dataset
        type: string
        required: true
      encrypt:
        description: Should the dataset be encrypted
        type: boolean
        default: false
        required: false
      compress:
        description: Should the dataset be compressed
        type: boolean
        default: false
        required: false
      last_modification_elapsed_time_minutes:
        description: Elapsed time in minutes since last modification after which a file can be stored in DDI
        type: integer
        required: false
        default: 2
      task_name:
        description: Name of the task for which to store results. If not set, all tasks results are saved.
        type: string
        required: false
      needed_files_patterns:
        type: list
        entry_schema:
          type: string
        description: >
          List of patterns of files that have to be stored.
          If empty, all files created/updated after the job start will be stored
        required: false
    attributes:
      destination_path:
        type: string
        description: Path to the dataset transferred in DDI
      stored_files:
        type: map
        entry_schema:
          type: org.lexis.common.ddi.types.StoredFileInfo
        description: Files stored, with their last modification data
      to_be_stored_files:
        type: map
        entry_schema:
          type: org.lexis.common.ddi.types.ToBeStoredFileInfo
        description: files to be stored, once they won't be modified for a given elapsed time
    capabilities:
      data_transfer:
        type: org.lexis.common.ddi.capabilities.DataTransferDDI
    requirements:
      - job:
          capability: org.lexis.common.heappe.capabilities.HeappeJob
          node: org.lexis.common.heappe.nodes.Job
          relationship: org.lexis.common.ddi.relationships.SendJobOutputsToDDI
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        delete:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          TOKEN: { get_property: [SELF, token] }
        submit:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        run:
          inputs:
            HPC_DIRECTORY_PATH: {get_attribute: [REQ_TARGET, job, file_transfer, path]}
            HPC_SERVER: {get_attribute: [REQ_TARGET, job, file_transfer, server]}
            HEAPPE_JOB_ID: {get_attribute: [REQ_TARGET, job, job_id]}
            HEAPPE_URL: {get_attribute: [REQ_TARGET, job, heappe_url]}
            TASKS_NAME_ID: {get_attribute: [REQ_TARGET, job, tasks_name_id]}
            JOB_CHANGED_FILES: {get_attribute: [REQ_TARGET, job, changed_files]}
            JOB_START_DATE: {get_attribute: [REQ_TARGET, job, start_date]}
            JOB_STATE: {get_attribute: [REQ_TARGET, job, state]}
            ENCRYPT: { get_property: [SELF, encrypt] }
            COMPRESS: { get_property: [SELF, compress] }
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
  org.lexis.common.ddi.nodes.StoreRunningHPCJobFilesToDDIGroupByDatasetJob:
    derived_from: org.lexis.common.ddi.nodes.StoreRunningHPCJobFilesToDDIJob
    description: >
      Transfer files from an HPC running job to DDI and group them per dataset according to a pattern, until this HPC job ends
    properties:
      group_files_pattern:
        type: string
        description: >
          Pattern identifying group of files to store in a dataset. Files with same pattern value go in the same dataset.
          Example: For a regular expression ".*_t([0-9]+).dat" and a file myfile_t00001.dat, this will return the identifier 00001
        required: true
      replication_sites:
        type: list
        entry_schema:
          type: string
        description: |
          List of sites on which the dataset should be replicated
        required: false
    attributes:
      dataset_replication:
        type: map
        description: Map of dataset replication status per group identifier
  org.lexis.common.ddi.nodes.DDIAccess:
    derived_from: tosca.nodes.Root
    description: >
      Provides access to the DDI API
    attributes:
      dataset_url:
        type: string
        description: DDI API dataset URL
      staging_url:
        type: string
        description: >
          DDI API staging URL on the local site
      sshfs_url:
        type: string
        description: >
          DDI API SSHFS export URL on the local site
    capabilities:
      ddi_access:
        type: org.lexis.common.ddi.capabilities.DDIAccess
    requirements:
      - os:
          capability: tosca.capabilities.OperatingSystem
          node: tosca.nodes.Compute
          relationship: org.lexis.common.ddi.relationships.SameSite
          occurrences: [1, 1]
    interfaces:
      Standard:
        start:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
  org.lexis.common.ddi.nodes.WaitForDDIDatasetJob:
    derived_from: tosca.nodes.Root
    description: >
      Wait for a dataset to appear in DDI, and optionally wait for files in this dataset
    properties:
      token:
        description: OpenID Connect token
        type: string
        required: true
      metadata:
        description: Dataset metadata
        type: org.lexis.common.ddi.types.Metadata
        required: true
      needed_files_patterns:
        type: list
        entry_schema:
          type: string
        description: >
          List of patterns of files that need to be available in dataset.
          If no pattern is provided, the dataset_file_paths attribute will stay empty,
          only the dataset_path and dataset_id will be set.
        required: false
    attributes:
      dataset_path:
        type: string
        description: Path to the dataset in DDI
      dataset_id:
        type: string
        description: dataset identifier
      dataset_file_paths:
        type: list
        entry_schema:
          type: string
        description: |
          Path of dataset files matching the patterns
    capabilities:
      dataset_files:
        type: org.lexis.common.ddi.capabilities.DatasetFilesProvider
    interfaces:
      Standard:
        create:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        delete:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          TOKEN: { get_property: [SELF, token] }
        submit:
          inputs:
            METADATA: { get_property: [SELF, metadata] }
            NEEDED_FILES_PATTERNS: { get_property: [SELF, needed_files_patterns] }
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        run:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
  org.lexis.common.ddi.nodes.DDIRuntimeToCloudJob:
    derived_from: org.lexis.common.ddi.nodes.pub.Cloud
    description: >
      Transfer from DDI to Cloud staging area, a dataset (or one dataset file) selected at runtime
    properties:
      token:
        description: OpenID Connect token
        type: string
        required: true
      file_pattern:
        description: >
          Pattern of the file to transfer.
          Only one file matching this pattern in the list of files
          returned by the dataset_files provider will be transferred.
          If no pattern is provided here, the whole dataset will be transferred.
        type: string
        required: false
      cloud_staging_area_directory_path:
        type: string
        description: >
          Relative directory path in cloud staging area where to copy the data.
        required: false
        default: ""
      timestamp_cloud_staging_area_directory:
        type: boolean
        description: Add a tiemstamp to cloud_staging_area_directory_path
        default: false
        required: false
    attributes:
      request_id:
        type: string
        description: >
          ID of the DDI request created
      destination_path:
        type: string
        description: Path to the data transferred in Cloud staging area
      staging_area_name:
        type: string
        description: Name of the cloud staging area
      staging_area_directory_path:
        type: string
        description: Path of the dataset directory in Cloud staging area
    capabilities:
      data_transfer:
        type: org.lexis.common.ddi.capabilities.DataTransferCloud
    requirements:
      - dataset_files:
          capability: org.lexis.common.ddi.capabilities.DatasetFilesProvider
          node: org.lexis.common.ddi.nodes.WaitForDDIDatasetJob
          relationship: org.lexis.common.ddi.relationships.DatasetFilesProvider
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        delete:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          TOKEN: { get_property: [SELF, token] }
        submit:
          inputs:
            DDI_DATASET_PATH: { get_attribute: [REQ_TARGET, dataset_files, dataset_path] }
            DDI_DATASET_FILE_PATHS: { get_attribute: [REQ_TARGET, dataset_files, dataset_file_paths] }
            FILE_PATTERN: { get_property: [SELF, file_pattern] }
            CLOUD_STAGING_AREA_DIRECTORY_PATH: { get_property: [SELF, cloud_staging_area_directory_path] }
            TIMESTAMP_CLOUD_STAGING_AREA_DIRECTORY: { get_property: [SELF, timestamp_cloud_staging_area_directory] }
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        run:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
  org.lexis.common.ddi.nodes.DDIRuntimeToHPCTaskJob:
    derived_from: tosca.nodes.Root
    description: >
      Transfer from DDI to HPC staging area, a dataset (or one dataset file) selected at runtime
    properties:
      token:
        description: OpenID Connect token
        type: string
        required: true
      task_name:
        description: Name of the task in the Job
        type: string
        required: true
      file_pattern:
        description: >
          Pattern of the file to transfer.
          Only one file matching this pattern in the list of files
          returned by the dataset_files provider will be transferred.
          If no pattern is provided here, the whole dataset will be transferred.
        type: string
        required: false
    attributes:
      request_id:
        type: string
        description: >
          ID of the DDI request created
      destination_path:
        type: string
        description: Path to the data transferred in HPC infrastructure
    capabilities:
      data_transfer:
        type: org.lexis.common.ddi.capabilities.DataTransferHPC
    requirements:
      - job:
          capability: org.lexis.common.heappe.capabilities.HeappeJob
          node: org.lexis.common.heappe.nodes.Job
          relationship: org.lexis.common.heappe.relationships.SendInputsToJob
          occurrences: [1, 1]
      - dataset_files:
          capability: org.lexis.common.ddi.capabilities.DatasetFilesProvider
          node: org.lexis.common.ddi.nodes.WaitForDDIDatasetJob
          relationship: org.lexis.common.ddi.relationships.DatasetFilesProvider
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        delete:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          TOKEN: { get_property: [SELF, token] }
        submit:
          inputs:
            DDI_DATASET_PATH: { get_attribute: [REQ_TARGET, dataset_files, dataset_path] }
            DDI_DATASET_FILE_PATHS: { get_attribute: [REQ_TARGET, dataset_files, dataset_file_paths] }
            HPC_DIRECTORY_PATH: {get_attribute: [REQ_TARGET, job, file_transfer, path]}
            HPC_SERVER: {get_attribute: [REQ_TARGET, job, file_transfer, server]}
            HEAPPE_JOB_ID: {get_attribute: [REQ_TARGET, job, job_id]}
            HEAPPE_URL: {get_attribute: [REQ_TARGET, job, heappe_url]}
            TASKS_NAME_ID: {get_attribute: [REQ_TARGET, job, tasks_name_id]}
            FILE_PATTERN: { get_property: [SELF, file_pattern] }
            TASK_NAME: {get_property: [SELF, task_name]}
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        run:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
  org.lexis.common.ddi.nodes.pub.GetDatasetInfo:
    derived_from: tosca.nodes.Root
    description: >
      Get dataset info (abstract)
    abstract: true
    attributes:
      locations:
        type: list
        entry_schema:
          type: string
        description: Locations of the dataset
      number_of_files:
        type: string
        description: Number of files in the dataset
      number_of_small_files:
        type: string
        description: Number of small files in the dataset (<= 32MB)
      size:
        type: string
        description: Size of the dataset in bytes
    capabilities:
      dataset_info:
        type: org.lexis.common.ddi.capabilities.DatasetInfo
  org.lexis.common.ddi.nodes.GetDDIDatasetInfoJob:
    derived_from: org.lexis.common.ddi.nodes.pub.GetDatasetInfo
    description: >
      Get DDI dataset info
    properties:
      token:
        description: OpenID Connect token
        type: string
        required: true
      dataset_path:
        type: string
        description: Path of the dataset in DDI
        required: true
    attributes:
      request_id:
        type: string
    interfaces:
      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          TOKEN: { get_property: [SELF, token] }
        submit:
          inputs:
            DDI_DATASET_PATH: { get_property: [SELF, dataset_path] }
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        run:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
  org.lexis.common.ddi.nodes.GetComputeInstanceDatasetInfo:
    derived_from: org.lexis.common.ddi.nodes.pub.GetDatasetInfo
    description: >
      Get Info on a directory that can be accessed from a cloud compute instance
    properties:
      dataset_path:
        description: Directory path
        type: string
        required: false
    requirements:
      - host:
          capability: tosca.capabilities.Container
          node: tosca.nodes.Compute
          relationship: tosca.relationships.HostedOn
    attributes:
      number_of_files: {get_operation_output: [SELF, Standard, start, NUMBER_OF_FILES]}
      number_of_small_files: {get_operation_output: [SELF, Standard, start, NUMBER_OF_SMALL_FILES]}
      size: {get_operation_output: [SELF, Standard, start, SIZE]}
    capabilities:
      dataset_info:
        type: org.lexis.common.ddi.capabilities.DatasetInfo
    interfaces:
      Standard:
        create:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        start:
          inputs:
            DATASET_PATH: {get_property: [SELF, dataset_path]}
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
  org.lexis.common.ddi.nodes.GetHPCJobTaskDatasetInfo:
    derived_from: org.lexis.common.ddi.nodes.pub.GetDatasetInfo
    description: >
      Get Info on a HPC job dataset
    properties:
      task_name:
        description: Name of the task for which to get files. If not set, all tasks files are considered.
        type: string
        required: false
      needed_files_patterns:
        type: list
        entry_schema:
          type: string
        description: |
          List of patterns of files that need to be taken into account for a transfer
        required: false
    requirements:
      - job:
          capability: org.lexis.common.heappe.capabilities.HeappeJob
          node: org.lexis.common.heappe.nodes.Job
          relationship: org.lexis.common.heappe.relationships.SendInputsToJob
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        start:
          inputs:
            CHANGED_FILES: {get_attribute: [REQ_TARGET, job, changed_files]}
            HEAPPE_JOB_ID: {get_attribute: [REQ_TARGET, job, job_id]}
            HEAPPE_URL: {get_attribute: [REQ_TARGET, job, heappe_url]}
            TASKS_NAME_ID: {get_attribute: [REQ_TARGET, job, tasks_name_id]}
            TASK_NAME: {get_property: [SELF, task_name]}
            NEEDED_FILES_PATTERNS: { get_property: [SELF, needed_files_patterns] }
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
  org.lexis.common.ddi.nodes.RefreshTargetTokens:
    derived_from: tosca.nodes.Root
    description: >
      Refreshes the access and refresh token attributes of the target
    requirements:
      - target:
          capability: tosca.capabilities.Node
          node: tosca.nodes.Root
          relationship: tosca.relationships.DependsOn
          occurrences: [ 1, 1 ]
    interfaces:
      Standard:
        start:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
  org.lexis.common.ddi.nodes.SSHFSMountStagingAreaDataset:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
       SSH mount the directory of a dataset in the staging area
    properties:
      token:
        description: OpenID Connect token
        type: string
        required: true
      mount_point_directory:
        description: mount point destination directory (will be created if it does not exist)
        type: string
        required: true
    attributes:
      user_name: {get_operation_output: [SELF, Standard, start, USER]}
      directory_absolute_path: {get_operation_output: [SELF, Standard, start, DIRECTORY_PATH]}
      data_absolute_path: {get_operation_output: [SELF, Standard, start, DATA_PATH]}
      staging_area_name: {get_operation_output: [SELF, Standard, start, staging_area_name]}
      staging_area_directory_path: {get_operation_output: [SELF, Standard, start, STAGING_AREA_DIRECTORY_PATH]}
      sshfsuser: {get_operation_output: [SELF, Standard, start, SSHFS_USER]}
      staging_area_root_directory: {get_operation_output: [SELF, Standard, start, STAGING_AREA_ROOT_DIRECTORY]}
      private_key_path: {get_operation_output: [SELF, Standard, start, PRIVATE_KEY_PATH]}
      access_token:
        type: string
        description: OpenID Connect access token
    capabilities:
      mounted_staging_area:
        type: org.lexis.common.ddi.capabilities.MountedStagingAreaAccess
      cloud_area_directory_provider:
        type: org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider
    requirements:
      - ddi_access:
          capability: org.lexis.common.ddi.capabilities.DDIAccess
          relationship: org.lexis.common.ddi.relationships.DDIAccessProvider
          occurrences: [1, 1]
      - data_transfer:
          capability: org.lexis.common.ddi.capabilities.DataTransferCloud
          relationship: org.lexis.common.ddi.relationships.CloudAreaDatasetProvider
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
        start:
          inputs:
            ACCESS_TOKEN: { get_attribute: [SELF, access_token] }
            MOUNT_POINT_DIRECTORY: { get_property: [SELF, mount_point_directory] }
            URL: {get_attribute: [REQ_TARGET, ddi_access, sshfs_url]}
            IP_ADDRESS: { get_attribute: [HOST, public_address] }
            staging_area_name: {get_attribute: [REQ_TARGET, data_transfer, staging_area_name]}
            STAGING_AREA_DIRECTORY: {get_attribute: [REQ_TARGET, data_transfer, staging_area_directory_path]}
            TARGET_PATH: {get_attribute: [REQ_TARGET, data_transfer, destination_path]}
          implementation: playbooks/sshfs_export_mount.yaml
        stop:
          inputs:
            ACCESS_TOKEN: { get_attribute: [SELF, access_token] }
            URL: {get_attribute: [REQ_TARGET, ddi_access, sshfs_url]}
            SSHFS_USER: { get_attribute: [SELF, sshfsuser] }
            STAGING_AREA_ROOT_DIRECTORY: { get_attribute: [SELF, staging_area_root_directory] }
            MOUNT_POINT_DIRECTORY: { get_property: [SELF, mount_point_directory] }
            PRIVATE_KEY_PATH: { get_attribute: [SELF, private_key_path] }
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
      custom:
        refresh_token:
          implementation:
            file: "embedded"
            type: org.lexis.common.ddi.artifacts.Deployment
capability_types:
  org.lexis.common.ddi.capabilities.DDIAccess:
    derived_from: tosca.capabilities.Root
    description: >
      A capability providing details on the access to DDI
    attributes:
      dataset_url:
        type: string
        description: DDI API dataset URL
      staging_url:
        type: string
        description: DDI API staging URL
      sshfs_url:
        type: string
        description: DDI API SSHFS export URL
  org.lexis.common.ddi.capabilities.DataTransferCloud:
    derived_from: tosca.capabilities.Root
    description: >
      A capability provided by a DDI Job performing a data transfer to the cloud staging area
    attributes:
      staging_area_name:
        type: string
        description: Name of the cloud staging area
      staging_area_directory_path:
        type: string
        description: Path of the dataset directory in Cloud staging area
      destination_path:
        type: string
        description: Path to the data transferred
  org.lexis.common.ddi.capabilities.DataTransferHPC:
    derived_from: tosca.capabilities.Root
    description: >
      A capability provided by a DDI Job performing a data transfer to the HPC
    attributes:
      destination_path:
        type: string
        description: Path to the dataset transferred
  org.lexis.common.ddi.capabilities.DataTransferDDI:
    derived_from: tosca.capabilities.Root
    description: >
      A capability provided by a DDI Job performing a data transfer to DDI
    attributes:
      destination_path:
        type: string
        description: Path to the dataset transferred
  org.lexis.common.ddi.capabilities.DatasetFilesProvider:
    derived_from: tosca.capabilities.Root
    description: >
      A capability provided by a Job providing details of a dataset and files it contains
    attributes:
      dataset_path:
        type: string
        description: Path to the dataset in DDI
      dataset_id:
        type: string
        description: dataset identifier
      dataset_file_paths:
        type: list
        entry_schema:
          type: string
        description: |
          Path of dataset files matching the patterns
  org.lexis.common.ddi.capabilities.CloudStagingAreaAccess:
    derived_from: tosca.capabilities.Root
    description: >
      A capability providing details on the access to Cloud Staging area
    attributes:
      staging_area_name:
        type: string
        description: Name of the staging area
      remote_file_system:
        type: string
        description: remote file system to mount to access the staging area
      mount_type:
        type: string
        description: Type of file system
      mount_options:
        type: string
        description: mount options to use
      user_id:
        type: string
        description: ID of the user with read/write access to this file system
      group_id:
        type: string
        description: ID of the unix group with read/write access to this file system
  org.lexis.common.ddi.capabilities.DeleteCloudData:
    derived_from: tosca.capabilities.Root
    description: >
      A capability fulfilling requirements of a node requiring to be
      associated with a DeleteCloudData Job.
  org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider:
    derived_from: tosca.capabilities.Root
    description: >
      A capability of a node providing a directory in the Cloud Staging area mounted on a host
    attributes:
      staging_area_name:
        type: string
        description: Name of the staging area
      staging_area_directory_path:
        type: string
        description: Path of the directory in Cloud staging area
      directory_absolute_path:
        type: string
        description: Absolute path of the directory in Cloud staging area mounted on a host
      user_name:
        type: string
        description: Name of a user having access to files in this directory
  org.lexis.common.ddi.capabilities.DatasetInfo:
    derived_from: tosca.capabilities.Root
    description: >
      A capability of a node providing info on a dataset
    attributes:
      locations:
        type: list
        entry_schema:
          type: string
        description: Locations of the dataset
      number_of_files:
        type: string
        description: Number of files in the dataset
      number_of_small_files:
        type: string
        description: Number of small files in the dataset (<= 32MB)
      size:
        type: string
        description: Size of the dataset in bytes
  org.lexis.common.ddi.capabilities.MountedStagingAreaAccess:
    derived_from: tosca.capabilities.Root
    description: >
      A capability fulfilling requirements of a node requiring to be
      associated with a mounted staging area.
    attributes:
      staging_area_name:
        type: string
        description: Name of the cloud staging area
      directory_absolute_path:
        type: string
        description: Directory where the cloud staging area file system is mounted
      data_absolute_path:
        type: string
        description: >
          Path to the cloud staging area data.
          This is the same as directory_absolute_path when the data is a dataset.
          This is a file path, when the data is a file copied in directory_absolute_path.
      user_name:
        type: string
        description: name of the user allowed to write in this staging area
relationship_types:
  org.lexis.common.ddi.relationships.SameSite:
    derived_from: tosca.relationships.DependsOn
    description: >
      Source must must be on same site as target
    valid_target_types: [ tosca.capabilities.OperatingSystem ]
  org.lexis.common.ddi.relationships.CloudAreaDirectoryProvider:
    derived_from: tosca.relationships.DependsOn
    description: >
      Relationship with a provider of dataset
    valid_target_types: [ org.lexis.common.ddi.capabilities.CloudAreaDirectoryProvider ]
  org.lexis.common.ddi.relationships.DDIAccessProvider:
    derived_from: tosca.relationships.DependsOn
    description: >
      Relationship with a provider of DDI access
    valid_target_types: [ org.lexis.common.ddi.capabilities.DDIAccess ]
  org.lexis.common.ddi.relationships.CloudAreaDatasetProvider:
    derived_from: tosca.relationships.DependsOn
    description: >
      Relationship with a provider of dataset in cloud staging area
    valid_target_types: [ org.lexis.common.ddi.capabilities.DataTransferCloud ]
  org.lexis.common.ddi.relationships.DatasetFilesProvider:
    derived_from: tosca.relationships.DependsOn
    description: >
      Relationship with a provider of details on a dataset and its files in DDI
    valid_target_types: [ org.lexis.common.ddi.capabilities.DatasetFilesProvider ]
  org.lexis.common.ddi.relationships.SendJobOutputsToDDI:
    derived_from: tosca.relationships.DependsOn
    description: Relationship with HEAppE job for which to store results in DDI
    valid_target_types: [ org.lexis.common.heappe.capabilities.HeappeJob ]
  org.lexis.common.ddi.relationships.DatasetInfoProvider:
    derived_from: tosca.relationships.DependsOn
    description: >
      Relationship with a provider of DDI access
    valid_target_types: [ org.lexis.common.ddi.capabilities.DatasetInfo ]