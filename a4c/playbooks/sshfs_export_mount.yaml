- name: Export sshfs and mount it
  hosts: all
  strategy: free
  become: true
  become_method: sudo
  tasks:
    - name: Create temporary file
      tempfile:
        state: file
        suffix: key
      register: privatekey
    - name: Set private key path (operation output)
      set_fact:
        PRIVATE_KEY_PATH: "{{ privatekey.path }}"
    - name: Generate keys
      openssh_keypair:
        path: "{{ privatekey.path }}"
        type: ed25519
        force: true
        mode: 0400
    - name: Get public key file content
      slurp:
        src: "{{ privatekey.path }}.pub"
      register: publickey_slurp
    - name: Decode public key file content
      set_fact:
        public_key: "{{ publickey_slurp['content'] | b64decode }}"
    - name: TEMPORARY step while DDI API returns an absolute path to staging area
      set_fact:
        splitval: "{{ STAGING_AREA_DIRECTORY.split('computeCloud/') }}"
    - name: Get relative path to staging area directory
      set_fact:
        STAGING_AREA_DIRECTORY_PATH: "{{ STAGING_AREA_DIRECTORY }}"
      when: splitval | length == 1
    - name: Get relative path to staging area directory
      set_fact:
        STAGING_AREA_DIRECTORY_PATH: "{{ splitval[1] }}"
      when: splitval | length > 1
    - name: Get root directory as the sshfs export API only allows to share the root dir
      set_fact:
        STAGING_AREA_ROOT_DIRECTORY: "{{ STAGING_AREA_DIRECTORY_PATH.split('/') | first}}"
    - name: Get subdir from this root dir
      set_fact:
        STAGING_AREA_SUB_DIRECTORY: "{{ STAGING_AREA_DIRECTORY_PATH.split('/') | reject('search',STAGING_AREA_ROOT_DIRECTORY) | list  | join('/')}}"
    - name: "Request sshfs export"
      uri:
        url: "{{URL}}"
        method: POST
        return_content: yes
        validate_certs: no
        headers:
          Authorization: "Bearer {{ ACCESS_TOKEN }}"
        body:
          host: "{{ IP_ADDRESS }}"
          pubkey: "{{ public_key }}"
          path: "{{ STAGING_AREA_ROOT_DIRECTORY }}"
        body_format: json
        status_code: 201
      register: result
    - name: Get result
      set_fact:
        response: "{{ result.json }}"
    - name: Set user and sshfs user (operation output)
      set_fact:
        USER: "root"
        SSHFS_USER: "{{ response.user }}"
    - name: Compute the absolute path of staging area directory on mount point (operation output)
      set_fact:
        DIRECTORY_PATH: "{{ MOUNT_POINT_DIRECTORY }}/{{ STAGING_AREA_SUB_DIRECTORY }}"
    - name: Split tha absolute path to target
      set_fact:
        splitval: "{{ TARGET_PATH.split('computeCloud/') }}"
    - name: Path to target is relative
      set_fact:
        TARGET_RELATIVE_PATH: "{{ TARGET_PATH }}"
      when: splitval | length == 1
    - name: Get relative path to target 
      set_fact:
        TARGET_RELATIVE_PATH: "{{ splitval[1] }}"
      when: splitval | length > 1
    - name: Compute the absolute path of data on mount point (operation output) when the data is a dataset
      set_fact:
        DATA_PATH: "{{ DIRECTORY_PATH }}"
      when: STAGING_AREA_DIRECTORY_PATH | length >= TARGET_RELATIVE_PATH | length
    - name: Compute the absolute path of data on mount point (operation output) when the data is a file
      set_fact:
        DATA_PATH: "{{ DIRECTORY_PATH }}/{{ TARGET_PATH | basename }}"
      when: STAGING_AREA_DIRECTORY_PATH | length < TARGET_RELATIVE_PATH | length
    - name: Create the mount point directory
      file:
        path: "{{ MOUNT_POINT_DIRECTORY }}"
        state: directory
        recurse: yes
        mode: 0744
    - name: Mount the sshfs file system
      command: "sshfs  -o StrictHostKeyChecking=no,reconnect,IdentityFile={{ privatekey.path }} {{ response.sshfs }} {{ MOUNT_POINT_DIRECTORY }}"
